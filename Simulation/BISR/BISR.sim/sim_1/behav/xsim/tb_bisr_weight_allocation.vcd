$date
   Fri Aug  8 17:37:29 2025
$end

$version
  2023.2
  $dumpfile ("tb_bisr_weight_allocation.vcd") 
$end

$timescale
  1ps
$end

$scope module tb_bisr_weight_allocation $end
$var reg 1 ! clk $end
$var reg 1 " rst_n $end
$var reg 1 # envm_wr_en $end
$var reg 16 $ envm_faulty_patterns_flat [15:0] $end
$var reg 1 % weight_start $end
$var reg 32 & input_weights [31:0] $end
$var reg 1 ' weight_valid $end
$var reg 2 ( read_addr [1:0] $end
$var wire 32 ) output_weights [31:0] $end
$var wire 2 * output_mapped_addr [1:0] $end
$var wire 1 + recovery_success $end
$var wire 1 , recovery_done $end
$var integer 32 - i [31:0] $end
$var integer 32 . j [31:0] $end
$scope module dut $end
$var wire 1 / clk $end
$var wire 1 0 rst_n $end
$var wire 1 1 envm_wr_en $end
$var wire 16 2 envm_faulty_patterns_flat [15:0] $end
$var wire 1 3 weight_start $end
$var wire 32 4 input_weights [31:0] $end
$var wire 1 5 weight_valid $end
$var wire 2 6 read_addr [1:0] $end
$var wire 32 ) output_weights [31:0] $end
$var wire 2 * output_mapped_addr [1:0] $end
$var wire 1 + recovery_success $end
$var wire 1 , recovery_done $end
$var wire 4 7 zero_weight_flags [3:0] $end
$var wire 4 8 faulty_rows_mask [3:0] $end
$var wire 4 9 valid_bits_out [3:0] $end
$var wire 1 : all_faulty_matched $end
$var wire 1 ; allocation_failed $end
$var wire 1 < match_success $end
$var wire 1 = match_failed $end
$var wire 2 > faulty_row_addr [1:0] $end
$var wire 2 ? mapped_read_addr [1:0] $end
$var reg 2 @ faulty_pe_addr [1:0] $end
$var reg 2 A mapping_addr [1:0] $end
$var reg 1 B mapping_addr_valid $end
$scope module faulty_pe_inst $end
$var wire 1 / clk $end
$var wire 1 0 rst_n $end
$var wire 1 1 wr_en $end
$var wire 16 2 faulty_patterns_flat [15:0] $end
$var wire 4 7 zero_weight_flags [3:0] $end
$var wire 1 5 weight_valid $end
$var wire 2 C current_row_addr [1:0] $end
$var reg 1 D match_success $end
$var reg 1 E match_failed $end
$var reg 2 F faulty_row_addr [1:0] $end
$var wire 4 8 faulty_rows_mask [3:0] $end
$var wire 4 9 valid_bits_out [3:0] $end
$var wire 1 : all_faulty_matched $end
$var reg 4 G valid_storage [3:0] $end
$var reg 4 H faulty_rows_info [3:0] $end
$var wire 4 I quick_candidates [3:0] $end
$var wire 4 J \cam_quick_filter[0].conflict_check  [3:0] $end
$var wire 4 K \cam_quick_filter[1].conflict_check  [3:0] $end
$var wire 4 L \cam_quick_filter[2].conflict_check  [3:0] $end
$var wire 4 M \cam_quick_filter[3].conflict_check  [3:0] $end
$var wire 4 N \precise_tree_matching[0].match_result  [3:0] $end
$var reg 3 O \precise_tree_matching[0].count_result  [2:0] $end
$var integer 32 P \precise_tree_matching[0].bit_idx  [31:0] $end
$var wire 4 Q \precise_tree_matching[1].match_result  [3:0] $end
$var reg 3 R \precise_tree_matching[1].count_result  [2:0] $end
$var integer 32 S \precise_tree_matching[1].bit_idx  [31:0] $end
$var wire 4 T \precise_tree_matching[2].match_result  [3:0] $end
$var reg 3 U \precise_tree_matching[2].count_result  [2:0] $end
$var integer 32 V \precise_tree_matching[2].bit_idx  [31:0] $end
$var wire 4 W \precise_tree_matching[3].match_result  [3:0] $end
$var reg 3 X \precise_tree_matching[3].count_result  [2:0] $end
$var integer 32 Y \precise_tree_matching[3].bit_idx  [31:0] $end
$var reg 3 Z max_match_count [2:0] $end
$var reg 2 [ best_match_index [1:0] $end
$var reg 1 \ match_found $end
$var integer 32 ] i [31:0] $end
$upscope $end
$scope module mapping_inst $end
$var wire 1 / clk $end
$var wire 1 0 rst_n $end
$var wire 4 8 faulty_rows_mask [3:0] $end
$var wire 1 < match_success $end
$var wire 1 = match_failed $end
$var wire 2 > faulty_addr [1:0] $end
$var wire 2 ^ current_row_addr [1:0] $end
$var wire 1 : all_faulty_matched $end
$var wire 1 1 envm_wr_en $end
$var wire 2 6 input_addr [1:0] $end
$var wire 2 ? mapped_addr [1:0] $end
$var wire 1 ; allocation_failed $end
$var reg 4 _ faulty_checker [3:0] $end
$var reg 4 ` allocation_checker [3:0] $end
$var reg 1 a faulty_checker_initialized $end
$var reg 1 b allocation_failed_reg $end
$var reg 1 c envm_wr_en_delayed $end
$var reg 2 d selected_healthy_row [1:0] $end
$var reg 2 e selected_faulty_row [1:0] $end
$var reg 1 f found_healthy_row $end
$var reg 1 g found_faulty_row $end
$var integer 32 h i [31:0] $end
$upscope $end
$scope module weight_storage_inst $end
$var wire 1 / clk $end
$var wire 1 0 rst_n $end
$var wire 1 5 wr_en $end
$var wire 2 i wr_addr [1:0] $end
$var wire 32 4 wr_data [31:0] $end
$var wire 2 ? rd_addr [1:0] $end
$var wire 32 ) rd_data [31:0] $end
$upscope $end
$upscope $end
$scope task display_test_setup $end
$upscope $end
$scope task execute_test_pattern $end
$upscope $end
$scope task execute_envm_initialization $end
$upscope $end
$scope task execute_weight_allocation $end
$upscope $end
$scope task execute_read_test $end
$upscope $end
$scope task display_internal_status $end
$upscope $end
$scope task check_results $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
1"
0#
b1010000000100100 $
0%
b0 &
0'
b0 (
bx )
bx *
x+
x,
bx -
bx .
0/
10
01
b1010000000100100 2
03
b0 4
05
b0 6
b1111 7
bx 8
bx 9
x:
x;
x<
x=
bx >
bx ?
bx @
bx A
xB
bx C
xD
xE
bx F
bx G
bx H
bx I
b0 J
b0 K
b0 L
b0 M
bx N
bx O
bx P
bx Q
bx R
bx S
bx T
bx U
bx V
bx W
bx X
bx Y
bx Z
bx [
x\
bx ]
bx ^
bx _
bx `
xa
xb
xc
bx d
bx e
xf
xg
bx h
bx i
$end

#5000
1!
1/
0;
0<
0=
0D
0E
0b
0c

#10000
0!
0"
0+
0,
0/
00
b0 8
b1111 9
0:
b0 >
b0 @
b0 A
0B
b0 C
b0 F
b1111 G
b0 H
b1111 I
b0 N
b0 O
b100 P
b0 Q
b0 R
b100 S
b0 T
b0 U
b100 V
b0 W
b0 X
b100 Y
b0 Z
b0 [
0\
b100 ]
b0 ^
b0 _
b0 `
0a
b0 d
b0 e
1f
0g
b100 h
b0 i

#15000
1!
1/
b100 ]
b100 h

#20000
0!
1"
1#
b100 -
0/
10
11

#25000
1!
1/
b1011 8
b1011 9
b1011 G
b1011 H
b1011 I
b100 N
b1 O
b100 P
b10 Q
b1 R
b100 S
b1010 W
b10 X
b100 Y
b10 Z
b11 [
1\
b100 ]
1c

#30000
0!
0#
1%
0/
01
13

#35000
1!
1/
b1011 _
1a
0c
b10 d
1f
1g
b100 h

#40000
0!
0%
b101100000000000101010 &
1'
b0 -
0/
03
b101100000000000101010 4
15
b1010 7
b1010 I
b100 J
b0 N
b0 O
b100 P
b10 Z
b11 [
1\
b100 ]

#45000
1!
1/
b11 9
1<
b11 >
b1 @
1B
b1 C
1D
b11 F
b11 G
b10 I
b1 Z
b1 [
1\
b100 ]
b1 i

#50000
0!
b1101000101110000000000101011 &
b1 -
0/
b1101000101110000000000101011 4
b10 7
b1000 M
b10 W
b1 X
b100 Y

#55000
1!
1/
b1 9
b1 >
b10 @
b1 A
b10 C
b1 F
b1 G
b0 I
b0 Z
b0 [
0\
b100 ]
b1 ^
b1000 `
b10 d
1f
1g
b100 h
b10 i

#60000
0!
b1110000110000010001000101100 &
b10 -
0/
b1110000110000010001000101100 4
b0 7
b10 K
b1010 M
b0 Q
b0 R
b100 S
b0 W
b0 X
b100 Y

#65000
1!
1/
0<
1=
b11 @
b10 A
b11 C
0D
1E
b10 ^
b1010 `
b10 d
1f
1g
b100 h
b11 i

#70000
0!
b1111000000000010001100101101 &
b11 -
0/
b1111000000000010001100101101 4
b100 7
b1 I
b0 J
b100 N
b1 O
b100 P
b1 Z
1\
b100 ]

#75000
1!
1/
b0 9
1:
1<
0=
b0 >
b11 A
1D
0E
b0 F
b0 G
b0 I
b0 Z
0\
b100 ]
b11 ^
b1110 `
b0 d
0f
1g
b100 h

#76000
b100 -

#80000
0!
0'
1+
1,
0/
05

#85000
1!
b1111000000000010001100101101 )
b11 *
1/
0<
b11 ?
0D
b1111 `
0g
b100 h

#90000
0!
0/

#95000
1!
b0 -
1/
1;
1b

#100000
0!
0/

#105000
1!
1/

#106000
b1 -

#110000
0!
b1 (
b1101000101110000000000101011 )
b1 *
0/
b1 6
b1 ?

#115000
1!
1/

#116000
b10 -

#120000
0!
b10 (
b1110000110000010001000101100 )
b10 *
0/
b10 6
b10 ?

#125000
1!
1/

#126000
b11 -

#130000
0!
b11 (
b101100000000000101010 )
b0 *
0/
b11 6
b0 ?

#135000
1!
1/

#136000
b100 -

#140000
0!
0/

#145000
1!
1/

#150000
0!
0/

#155000
1!
1/
