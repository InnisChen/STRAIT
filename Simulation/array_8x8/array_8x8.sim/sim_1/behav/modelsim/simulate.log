# do {Array_8x8_tb_simulate.do}
# vsim -voptargs=""+acc"" -L xil_defaultlib -L unisims_ver -L unimacro_ver -L secureip -lib xil_defaultlib xil_defaultlib.Array_8x8_tb xil_defaultlib.glbl 
# Start time: 20:16:17 on Jul 13,2025
# Loading xil_defaultlib.Array_8x8_tb
# Loading xil_defaultlib.PE_Array_8x8
# Loading xil_defaultlib.STRAIT_PE
# Loading xil_defaultlib.MAC
# Loading xil_defaultlib.glbl
# 1
# 1
# .main_pane.wave.interior.cs.body.pw.wf
# .main_pane.structure.interior.cs.body.struct
# .main_pane.objects.interior.cs.body.tree
# ----------------------
# -- Simulation Start --
# ----------------------
# Reading weight matrix from weight.dat (decimal format)
# ** Warning: (vsim-PLI-3406) Too many digits (4) in data on line 2 of file "C:/Project/STRAIT/weight.dat". (Max is 2.)    : ../../../../../Array_8x8_tb.v(147)
#    Time: 10 ns  Iteration: 0  Instance: /Array_8x8_tb
# Reading activation matrix from activation.dat (decimal format)
# ** Warning: (vsim-PLI-3406) Too many digits (4) in data on line 2 of file "C:/Project/STRAIT/activation.dat". (Max is 2.)    : ../../../../../Array_8x8_tb.v(162)
#    Time: 10 ns  Iteration: 0  Instance: /Array_8x8_tb
# Weight and activation matrices loaded successfully
# 
# Weight Matrix:
# Row 0:   x   x   x   x   x   x   x   x 
# Row 1:   x   x   x   x   x   x   x   x 
# Row 2:   x   x   x   x   x   x   x   x 
# Row 3:   x   x   x   x   x   x   x   x 
# Row 4:   x   x   x   x   x   x   x   x 
# Row 5:   x   x   x   x   x   x   x   x 
# Row 6:   x   x   x   x   x   x   x   x 
# Row 7:   x   x   x   x   x   x   x   x 
# 
# Activation Matrix:
# Row 0:   x   x   x   x   x   x   x   x 
# Row 1:   x   x   x   x   x   x   x   x 
# Row 2:   x   x   x   x   x   x   x   x 
# Row 3:   x   x   x   x   x   x   x   x 
# Row 4:   x   x   x   x   x   x   x   x 
# Row 5:   x   x   x   x   x   x   x   x 
# Row 6:   x   x   x   x   x   x   x   x 
# Row 7:   x   x   x   x   x   x   x   x 
# Reset completed at time 30000
# Cycle 1: Loading weight column 7
#   Weights: [x, x, x, x, x, x, x, x]
# Cycle 2: Loading weight column 6
#   Weights: [x, x, x, x, x, x, x, x]
# Cycle 3: Loading weight column 5
#   Weights: [x, x, x, x, x, x, x, x]
# Cycle 4: Loading weight column 4
#   Weights: [x, x, x, x, x, x, x, x]
# Cycle 5: Loading weight column 3
#   Weights: [x, x, x, x, x, x, x, x]
# Cycle 6: Loading weight column 2
#   Weights: [x, x, x, x, x, x, x, x]
# Cycle 7: Loading weight column 1
#   Weights: [x, x, x, x, x, x, x, x]
# Cycle 8: Loading final weight column and first activation
#   Final Weights: [x, x, x, x, x, x, x, x]
#   First activation: activation_in[0] = x
# Cycle 9: Loading activation diagonal 1
#   activation_in[0] <= activation_matrix[1][0] = x
#   activation_in[1] <= activation_matrix[0][1] = x
# Cycle 10: Loading activation diagonal 2
#   activation_in[0] <= activation_matrix[2][0] = x
#   activation_in[1] <= activation_matrix[1][1] = x
#   activation_in[2] <= activation_matrix[0][2] = x
# Cycle 11: Loading activation diagonal 3
#   activation_in[0] <= activation_matrix[3][0] = x
#   activation_in[1] <= activation_matrix[2][1] = x
#   activation_in[2] <= activation_matrix[1][2] = x
#   activation_in[3] <= activation_matrix[0][3] = x
# Cycle 12: Loading activation diagonal 4
#   activation_in[0] <= activation_matrix[4][0] = x
#   activation_in[1] <= activation_matrix[3][1] = x
#   activation_in[2] <= activation_matrix[2][2] = x
#   activation_in[3] <= activation_matrix[1][3] = x
#   activation_in[4] <= activation_matrix[0][4] = x
# Cycle 13: Loading activation diagonal 5
#   activation_in[0] <= activation_matrix[5][0] = x
#   activation_in[1] <= activation_matrix[4][1] = x
#   activation_in[2] <= activation_matrix[3][2] = x
#   activation_in[3] <= activation_matrix[2][3] = x
#   activation_in[4] <= activation_matrix[1][4] = x
#   activation_in[5] <= activation_matrix[0][5] = x
# Cycle 14: Loading activation diagonal 6
#   activation_in[0] <= activation_matrix[6][0] = x
#   activation_in[1] <= activation_matrix[5][1] = x
#   activation_in[2] <= activation_matrix[4][2] = x
#   activation_in[3] <= activation_matrix[3][3] = x
#   activation_in[4] <= activation_matrix[2][4] = x
#   activation_in[5] <= activation_matrix[1][5] = x
#   activation_in[6] <= activation_matrix[0][6] = x
# Cycle 15: Loading activation diagonal 7
#   activation_in[0] <= activation_matrix[7][0] = x
#   activation_in[1] <= activation_matrix[6][1] = x
#   activation_in[2] <= activation_matrix[5][2] = x
#   activation_in[3] <= activation_matrix[4][3] = x
#   activation_in[4] <= activation_matrix[3][4] = x
#   activation_in[5] <= activation_matrix[2][5] = x
#   activation_in[6] <= activation_matrix[1][6] = x
#   activation_in[7] <= activation_matrix[0][7] = x
# Cycle 16: Loading activation diagonal 8
#   activation_in[1] <= activation_matrix[7][1] = x
#   activation_in[2] <= activation_matrix[6][2] = x
#   activation_in[3] <= activation_matrix[5][3] = x
#   activation_in[4] <= activation_matrix[4][4] = x
#   activation_in[5] <= activation_matrix[3][5] = x
#   activation_in[6] <= activation_matrix[2][6] = x
#   activation_in[7] <= activation_matrix[1][7] = x
# Cycle 16: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[0][0] = x from partial_sum_out[0]
# Cycle 17: Loading activation diagonal 9
#   activation_in[2] <= activation_matrix[7][2] = x
#   activation_in[3] <= activation_matrix[6][3] = x
#   activation_in[4] <= activation_matrix[5][4] = x
#   activation_in[5] <= activation_matrix[4][5] = x
#   activation_in[6] <= activation_matrix[3][6] = x
#   activation_in[7] <= activation_matrix[2][7] = x
# Cycle 17: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[0][1] = x from partial_sum_out[0]
#   -> Captured result[1][0] = x from partial_sum_out[1]
# Cycle 18: Loading activation diagonal 10
#   activation_in[3] <= activation_matrix[7][3] = x
#   activation_in[4] <= activation_matrix[6][4] = x
#   activation_in[5] <= activation_matrix[5][5] = x
#   activation_in[6] <= activation_matrix[4][6] = x
#   activation_in[7] <= activation_matrix[3][7] = x
# Cycle 18: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[0][2] = x from partial_sum_out[0]
#   -> Captured result[1][1] = x from partial_sum_out[1]
#   -> Captured result[2][0] = x from partial_sum_out[2]
# Cycle 19: Loading activation diagonal 11
#   activation_in[4] <= activation_matrix[7][4] = x
#   activation_in[5] <= activation_matrix[6][5] = x
#   activation_in[6] <= activation_matrix[5][6] = x
#   activation_in[7] <= activation_matrix[4][7] = x
# Cycle 19: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[0][3] = x from partial_sum_out[0]
#   -> Captured result[1][2] = x from partial_sum_out[1]
#   -> Captured result[2][1] = x from partial_sum_out[2]
#   -> Captured result[3][0] = x from partial_sum_out[3]
# Cycle 20: Loading activation diagonal 12
#   activation_in[5] <= activation_matrix[7][5] = x
#   activation_in[6] <= activation_matrix[6][6] = x
#   activation_in[7] <= activation_matrix[5][7] = x
# Cycle 20: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[0][4] = x from partial_sum_out[0]
#   -> Captured result[1][3] = x from partial_sum_out[1]
#   -> Captured result[2][2] = x from partial_sum_out[2]
#   -> Captured result[3][1] = x from partial_sum_out[3]
#   -> Captured result[4][0] = x from partial_sum_out[4]
# Cycle 21: Loading activation diagonal 13
#   activation_in[6] <= activation_matrix[7][6] = x
#   activation_in[7] <= activation_matrix[6][7] = x
# Cycle 21: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[0][5] = x from partial_sum_out[0]
#   -> Captured result[1][4] = x from partial_sum_out[1]
#   -> Captured result[2][3] = x from partial_sum_out[2]
#   -> Captured result[3][2] = x from partial_sum_out[3]
#   -> Captured result[4][1] = x from partial_sum_out[4]
#   -> Captured result[5][0] = x from partial_sum_out[5]
# Cycle 22: Loading activation diagonal 14
#   activation_in[7] <= activation_matrix[7][7] = x
# Cycle 22: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[0][6] = x from partial_sum_out[0]
#   -> Captured result[1][5] = x from partial_sum_out[1]
#   -> Captured result[2][4] = x from partial_sum_out[2]
#   -> Captured result[3][3] = x from partial_sum_out[3]
#   -> Captured result[4][2] = x from partial_sum_out[4]
#   -> Captured result[5][1] = x from partial_sum_out[5]
#   -> Captured result[6][0] = x from partial_sum_out[6]
# Cycle 23: Waiting for computation completion
# Cycle 23: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[0][7] = x from partial_sum_out[0]
#   -> Captured result[1][6] = x from partial_sum_out[1]
#   -> Captured result[2][5] = x from partial_sum_out[2]
#   -> Captured result[3][4] = x from partial_sum_out[3]
#   -> Captured result[4][3] = x from partial_sum_out[4]
#   -> Captured result[5][2] = x from partial_sum_out[5]
#   -> Captured result[6][1] = x from partial_sum_out[6]
#   -> Captured result[7][0] = x from partial_sum_out[7]
# Cycle 24: Waiting for computation completion
# Cycle 24: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[1][7] = x from partial_sum_out[1]
#   -> Captured result[2][6] = x from partial_sum_out[2]
#   -> Captured result[3][5] = x from partial_sum_out[3]
#   -> Captured result[4][4] = x from partial_sum_out[4]
#   -> Captured result[5][3] = x from partial_sum_out[5]
#   -> Captured result[6][2] = x from partial_sum_out[6]
#   -> Captured result[7][1] = x from partial_sum_out[7]
# Cycle 25: Waiting for computation completion
# Cycle 25: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[2][7] = x from partial_sum_out[2]
#   -> Captured result[3][6] = x from partial_sum_out[3]
#   -> Captured result[4][5] = x from partial_sum_out[4]
#   -> Captured result[5][4] = x from partial_sum_out[5]
#   -> Captured result[6][3] = x from partial_sum_out[6]
#   -> Captured result[7][2] = x from partial_sum_out[7]
# Cycle 26: Waiting for computation completion
# Cycle 26: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[3][7] = x from partial_sum_out[3]
#   -> Captured result[4][6] = x from partial_sum_out[4]
#   -> Captured result[5][5] = x from partial_sum_out[5]
#   -> Captured result[6][4] = x from partial_sum_out[6]
#   -> Captured result[7][3] = x from partial_sum_out[7]
# Cycle 27: Waiting for computation completion
# Cycle 27: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[4][7] = x from partial_sum_out[4]
#   -> Captured result[5][6] = x from partial_sum_out[5]
#   -> Captured result[6][5] = x from partial_sum_out[6]
#   -> Captured result[7][4] = x from partial_sum_out[7]
# Cycle 28: Waiting for computation completion
# Cycle 28: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[5][7] = x from partial_sum_out[5]
#   -> Captured result[6][6] = x from partial_sum_out[6]
#   -> Captured result[7][5] = x from partial_sum_out[7]
# Cycle 29: Waiting for computation completion
# Cycle 29: partial_sum_out = [x, x, x, x, x, x, x, x]
#   -> Captured result[6][7] = x from partial_sum_out[6]
#   -> Captured result[7][6] = x from partial_sum_out[7]
# Cycle 30: Simulation completed
# 
# Result Matrix:
# Row 0:        x        x        x        x        x        x        x        x 
# Row 1:        x        x        x        x        x        x        x        x 
# Row 2:        x        x        x        x        x        x        x        x 
# Row 3:        x        x        x        x        x        x        x        x 
# Row 4:        x        x        x        x        x        x        x        x 
# Row 5:        x        x        x        x        x        x        x        x 
# Row 6:        x        x        x        x        x        x        x        x 
# Row 7:        x        x        x        x        x        x        x        0 
# ----------------------
# -- Simulation End --
# ----------------------
# ** Note: $finish    : ../../../../../Array_8x8_tb.v(291)
#    Time: 325 ns  Iteration: 1  Instance: /Array_8x8_tb
# End time: 20:19:43 on Jul 13,2025, Elapsed time: 0:03:26
# Errors: 0, Warnings: 2
